{"version":3,"sources":["../src/server.js"],"names":["myVar","document","write","console","log","storage","require","initSync","argv","command","yargs","options","word_name","demand","alias","type","description","definition","example","help","_"],"mappings":"AAAA;;AAEA;;AACA,IAAIA,QAAQ,MAAZ;AACAC,SAASC,KAAT,YAAwBF,KAAxB;;AAGAG,QAAQC,GAAR,CAAY,mBAAZ;;AAEA;;AAEA,IAAMC,UAAUC,QAAQ,cAAR,CAAhB;AACAD,QAAQE,QAAR;;AAEA,IAAMC,OAAOF,QAAQ,OAAR,EACZG,OADY,CACJ,QADI,EACM,wCADN,EACgD,UAACC,KAAD,EAAW;AACpEA,UAAMC,OAAN,CAAc;AACVC,mBAAW;AACPC,oBAAQ,IADD;AAEPC,mBAAO,MAFA;AAGPC,kBAAM,QAHC;AAIPC,yBAAa;AAJN,SADD;AAOVC,oBAAY;AACRJ,oBAAQ,IADA;AAERC,mBAAO,QAFC;AAGRC,kBAAM,QAHE;AAIRC,yBAAa;AAJL,SAPF;AAaVE,iBAAS;AACLL,oBAAQ,IADH;AAELC,mBAAO,IAFF;AAGLC,kBAAM,QAHD;AAILC,yBAAa;AAJR;AAbC,KAAd,EAmBGG,IAnBH,CAmBQ,MAnBR;AAoBH,CAtBY,EAuBZV,OAvBY,CAuBJ,MAvBI,EAuBI,qBAvBJ,EAuB2B,UAACC,KAAD,EAAW;AAC/CA,UAAMC,OAAN,CAAc;AACTC,mBAAW;AACRC,oBAAQ,IADA;AAERC,mBAAO,MAFC;AAGRC,kBAAM,QAHE;AAIRC,yBAAa;AAJL,SADF;AAOVC,oBAAY;AACRJ,oBAAQ,IADA;AAERC,mBAAO,QAFC;AAGRC,kBAAM,QAHE;AAIRC,yBAAa;AAJL,SAPF;AAaVE,iBAAS;AACLL,oBAAQ,IADH;AAELC,mBAAO,IAFF;AAGLC,kBAAM,QAHD;AAILC,yBAAa;AAJR;AAbC,KAAd,EAmBGG,IAnBH,CAmBQ,MAnBR;AAoBH,CA5CY,EA6CZA,IA7CY,CA6CP,MA7CO,EA8CZX,IA9CD,C,CA8CO;AACP,IAAIC,UAAUD,KAAKY,CAAL,CAAO,CAAP,CAAd,C,CAAyB;;AAEzB;;AAEA,IAAIZ,KAAKY,CAAL,CAAO,CAAP,MAAc,OAAlB,EAA0B;AAAE;AAC5B;AACA;AACCjB,YAAQC,GAAR,CAAY,cAAZ;AACA;AACD;AACA","file":"server.js","sourcesContent":["'use strict';\n\n// Testing to see if the transpile is working\nlet myVar = \"Zach\";\ndocument.write(`Hello ${myVar}!`);\n\n\nconsole.log(\"Starting program.\");\n\n//Nodepedia TM\n\nconst storage = require(\"node-persist\");\nstorage.initSync();\n\nconst argv = require('yargs')\n.command('create', 'Creates a new word for the dictionary.', (yargs) => {\n    yargs.options({\n        word_name: {\n            demand: true,\n            alias: 'word',\n            type: 'string',\n            description: 'This is a word in the dictionary.'\n        },\n        definition: {\n            demand: true,\n            alias: 'define',\n            type: 'string',\n            description: 'This is the definition of the word.'\n        },\n        example: {\n            demand: true,\n            alias: 'eg',\n            type: 'string',\n            description: 'This is an example of the word in use.'\n        }\n    }).help('help');\n})\n.command('find', 'Finds word by name.', (yargs) => {\n    yargs.options({\n         word_name: {\n            demand: true,\n            alias: 'word',\n            type: 'string',\n            description: 'This is a word in the dictionary.'\n        },\n        definition: {\n            demand: true,\n            alias: 'define',\n            type: 'string',\n            description: 'This is the definition of the word.'\n        },\n        example: {\n            demand: true,\n            alias: 'eg',\n            type: 'string',\n            description: 'This is an example of the word in use.'\n        }\n    }).help('help');\n})\n.help('help')\n.argv; // No idea what .argv is doing\nlet command = argv._[0]; // Can't remember what this does\n\n//console.log(argv);\n\nif (argv._[0] === 'hello'){ // trying to think of a way to make this into\n// a 'terminal search input' so that the user can put in a function/word and the \n//program will retrieve it and print it to console\n\tconsole.log(\"Hello World!\")\n}\n//is it a crazy idea to perhaps make a dictionary that is available from\n//the backend (with node) as well as the front end (with the use of react.js)?"]}