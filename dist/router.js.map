{"version":3,"sources":["../src/router.js"],"names":["express","require","app","router","Router","mongoose","Libraries","_","bodyParser","jsonParser","json","use","get","req","res","find","err","library_name","status","message","findOne","library","method","entries","description","post","create","body","put","findOneAndUpdate","toString","delete","findByIdAndRemove","params","_id","module","exports"],"mappings":"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","file":"router.js","sourcesContent":["'use strict';\n\nconst express = require(\"express\");\nconst app = express();\nconst router = express.Router();\nconst mongoose = require('mongoose');\nconst Libraries = require('../models/library');\nconst _ = require('underscore');\nconst bodyParser = require('body-parser');\nconst jsonParser = bodyParser.json();\n\napp.use(jsonParser);\n\n//GET all libraries\nrouter.get('/libraries', (req, res) => {\n    Libraries.find((err, library_name) => {\n        if (err) {\n            return res.status(500).json({\n                message: 'Internal Server Error'\n            });\n        }\n        res.json(library_name);\n    });\n});\n\n//GET single library // I don't think I need this\nrouter.get(`/libraries/${Libraries.library_name}`, (req, res) => {\n    Libraries.findOne({\n        library_name: Libraries.library_name\n    }), (err, library) => {\n        if (err) {\n            return res.status(500).json({\n                message: 'Library not found'\n            });\n        }\n        res.json(library);\n    }\n});\n\n\n//GET method and description from library // I think this almost works\nrouter.get(`/libraries/${Libraries.library_name}`, (req, res) => {\n    Libraries.findOne({\n        method: Libraries.library_name.entries[0].method,\n        description: Libraries.library_name.entries[0].description \n    }), (err, method) => {\n        if (err) {\n            return res.status(500).json({\n                message: 'Method not found'\n            });\n        }\n        res.json(method);\n    }\n});\n\n\n//POST libraries\nrouter.post('/libraries', (req, res) => {\n    //console.log(req.body);\n    Libraries.create({\n        library_name: req.body.library_name\n    }, (err, library) => {\n        if (err) {\n            return res.status(500).json({\n                message: 'Internal Server Error'\n            });\n        }\n        res.status(201).json(library);\n    });\n});\n\n\n//PUT \nrouter.put(`/libraries/${Libraries.library_name}`, (req, res) => {\n    Libraries.findOneAndUpdate({ library_name: Libraries.library_name }, Libraries.entries[{\n        method: req.body.toString(),\n        description: req.body.toString()\n    }]);\n});\n\n\n\n//POST library object in Mongo\n// router.post('/libraries', (req, res) => {\n//     console.log(req.body);\n//     let mylibraryToAdd = new Libraries({\n//             library_name: req.body.toString(),\n//             entries: [{\n//                 method: req.body.toString(),\n//                 description: req.body.toString()\n//             }]\n//         })\n//         mylibraryToAdd.save((err, library) => {\n//             if (err) {\n//                 console.error(err);                \n//             }            \n//                 console.log({library});\n            \n//         });\n        \n// });\n\n\n//Seems doable\nrouter.delete('/libraries/:_id', (req, res) => {\n\n    Libraries.findByIdAndRemove(req.params._id, (err, library) => {\n        if (err) {\n            return res.status(404);\n        }\n        res.json({\n            message: 'Library deleted.'\n        })\n    });\n\n});\n\nmodule.exports = router;\n"]}