{"version":3,"sources":["../src/router.js"],"names":["express","require","app","router","Router","Libraries","_","bodyParser","jsonParser","json","nextId_lib","nextId_code","use","get","req","res","find","err","library_name","status","message","findOne","_id","params","post","body","console","log","description","put","nameId","parseInt","id","matchedNameId","findWhere","delete","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,MAAMF,SAAZ;AACA,IAAMG,SAASH,QAAQI,MAAR,EAAf;AACA,IAAMC,YAAYJ,QAAQ,mBAAR,CAAlB;AACA,IAAMK,IAAIL,QAAQ,YAAR,CAAV;AACA,IAAMM,aAAaN,QAAQ,aAAR,CAAnB;AACA,IAAMO,aAAaD,WAAWE,IAAX,EAAnB;AACA,IAAIC,aAAa,CAAjB;AACA,IAAIC,cAAc,CAAlB;;AAEAT,IAAIU,GAAJ,CAAQL,WAAWE,IAAX,EAAR;;AAEAN,OAAOU,GAAP,CAAW,YAAX,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnCV,cAAUW,IAAV,CAAe,UAACC,GAAD,EAAMC,YAAN,EAAuB;AAClC,YAAGD,GAAH,EAAQ;AACJ,mBAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AACxBW,yBAAS;AADe,aAArB,CAAP;AAGH;AACDL,YAAIN,IAAJ,CAASS,YAAT;AACH,KAPD;AAQH,CATD;;AAWA;AACAf,OAAOU,GAAP,CAAW,iBAAX,EAA8B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAE;AAC1CV,cAAUgB,OAAV,CAAkB,EAACC,KAAKR,IAAIS,MAAJ,CAAWD,GAAjB,EAAlB,GAA0C,UAACL,GAAD,EAAMC,YAAN,EAAuB;AAC7D,YAAID,GAAJ,EAAS;AACL,mBAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AACxBW,yBAAS;AADe,aAArB,CAAP;AAGH;AACDL,YAAIN,IAAJ,CAASS,YAAT;AACH,KAPD;AAQH,CATD;;AAaA;;AAEAf,OAAOqB,IAAP,CAAY,YAAZ,EAA0B,UAACV,GAAD,EAAMC,GAAN,EAAc;AACpC,QAAIU,OAAOX,IAAIW,IAAf;;AAEF;;AAEEC,YAAQC,GAAR,CAAY,kBAAkBF,KAAKG,WAAnC;;AAEF;;AAEEb,QAAIN,IAAJ,CAASgB,IAAT;AACH,CAVD;;AAcAtB,OAAO0B,GAAP,CAAW,iBAAX,EAA8B,UAACf,GAAD,EAAMC,GAAN,EAAc;AACxC,QAAIe,SAASC,SAASjB,IAAIS,MAAJ,CAAWS,EAApB,EAAwB,EAAxB,CAAb;AACA;AACA,QAAIC,gBAAgB3B,EAAE4B,SAAF,EAApB;AAEH,CALD;;AAOA/B,OAAOgC,MAAP,CAAc,iBAAd,EAAiC,UAACrB,GAAD,EAAMC,GAAN,EAAc;;AAE/C;AACA;;AAEC,CALD;;AAOAqB,OAAOC,OAAP,GAAiBlC,MAAjB","file":"router.js","sourcesContent":["'use strict';\n\nconst express = require(\"express\");\nconst app = express();\nconst router = express.Router();\nconst Libraries = require('../models/library');\nconst _ = require('underscore');\nconst bodyParser = require('body-parser');\nconst jsonParser = bodyParser.json();\nlet nextId_lib = 1;\nlet nextId_code = 1;\n\napp.use(bodyParser.json());\n\nrouter.get('/libraries', (req, res) => {\n    Libraries.find((err, library_name) => {\n        if(err) {\n            return res.status(500).json({\n                message: 'Internal Server Error'\n            });\n        }\n        res.json(library_name);\n    });\n});\n\n//fix words\nrouter.get('/libraries/:_id', (req, res) => { // \n    Libraries.findOne({_id: req.params._id}), (err, library_name) => {\n        if (err) {\n            return res.status(500).json({\n                message: 'Library not found'\n            });\n        }\n        res.json(library_name);\n    }\n});\n\n\n\n//POST\n\nrouter.post('/libraries', (req, res) => {\n    let body = req.body;\n  \n  // id field?\n  \n    console.log('description: ' + body.description);\n  \n  // push?\n    \n    res.json(body);\n});\n\n\n\nrouter.put('/libraries/:_id', (req, res) => {\n    let nameId = parseInt(req.params.id, 10);\n    //counter for the library id?\n    let matchedNameId = _.findWhere()\n    \n});\n\nrouter.delete('/libraries/:_id', (req, res) => {\n   \n//   if () {}\n//   else {}\n    \n});\n\nmodule.exports = router;\n"]}